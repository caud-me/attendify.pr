

app.get('/admins/me', requireRole(['admin']), async (req, res) => {
    const $admin_username = req.session.user.username

    const [me_fullname] = await pool.execute(`
        SELECT full_name, role FROM users WHERE username = ?
    `, [$admin_username]); 

    const result = {
        fullname: me_fullname
    }

    res.json(result);
})

app.get('/admins/api', requireRole(['admin']), async (req, res) => {
    const [users] = await pool.execute(`
        SELECT * FROM users
    `)
    const [students] = await pool.execute(`
        SELECT * FROM students
    `) 
    const [student_classes] = await pool.execute(`
        SELECT * FROM student_classes
    `)
    const [courses] = await pool.execute(`
        SELECT * FROM courses
    `) 
    const [classes] = await pool.execute(`
        SELECT * FROM classes
    `) 
    const [attendance_history] = await pool.execute(`
        SELECT * FROM attendance_history
    `)
    const [attendance] = await pool.execute(`
        SELECT * FROM attendance
    `) 

    const result = {
        admin_users: users,
        admin_students: students,
        admin_student_classes: student_classes,
        admin_courses: courses,
        admin_classes: classes,
        admin_attendance_history: attendance_history,
        admin_attendance: attendance
    }

    res.json(result);
})

app.post('/admins/createTeacher', requireRole(['admin']), async (req, res) => {
    const {fullname} = req.body;

    const username = toUsername(fullname);
    const password = generatePassword(12);

    try {
        const [result] = await pool.execute(
            `INSERT INTO users (username, full_name, password, role) VALUES (?, ?, ?, ?)`,
            [username, fullname, password, 'teacher']
        );
    
        res.json({ message: 'User created', fullname, password });
        console.log(`[Attendify] Admin created teacher ${username}`)
    } catch (error) {
        res.json({ message: 'Either duplicate entry, or something is wrong'});
    }
});

app.post('/admins/createFacilitator', requireRole(['admin']), async (req, res) => {
    const {fullname} = req.body;

    const username = toUsername(fullname);
    const password = generatePassword(12);

    try {
        const [result] = await pool.execute(
            `INSERT INTO users (username, full_name, password, role) VALUES (?, ?, ?, ?)`,
            [username, fullname, password, 'facilitator']
        );
    
        res.json({ message: 'User created', fullname, password });
        console.log(`[Attendify] Facilitator created guard ${username}`)
    } catch (error) {
        res.json({ message: 'Either duplicate entry, or something is wrong'});
    }
});

app.post('/admins/createAdmin', requireRole(['admin']), async (req, res) => {
    const {fullname} = req.body;

    const username = toUsername(fullname);
    const password = generatePassword(12);

    try {
        const [result] = await pool.execute(
            `INSERT INTO users (username, full_name, password, role) VALUES (?, ?, ?, ?)`,
            [username, fullname, password, 'admin']
        );
    
        res.json({ message: 'User created', fullname, password });
        console.log(`[Attendify] Admin created admin ${username}`)
    } catch (error) {
        res.json({ message: 'Either duplicate entry, or something is wrong'});
    }
});

app.post('/admins/addCourse', requireRole(['admin']), async (req, res) => {
    const {coursecode, coursename} = req.body;

    try {
        const [result] = await pool.execute(
            `INSERT INTO courses (course_code, course_name) VALUES (?, ?)`,
            [coursecode, coursename]
        );
    
        res.json({ message: 'Course Created'});
        console.log(`[Attendify] Admin created course ${coursecode, coursename}`)
        console.log(`[Attendify] ${coursecode, coursename} requires an instructor, set up by adding a class`)
    } catch (error) {
        res.json({ message: 'Either duplicate entry, or something is wrong'});
    }
});

app.post('/admins/addClass', requireRole(['admin']), async (req, res) => {
    const { coursecode, gradesection, username, day, starttime, endtime } = req.body;

    // generate class_id in the format:: grade_section-course_code-day-start_time
    const CLASSID = `${gradesection}-${coursecode}-${day.toUpperCase()}-${starttime.replace(':', '')}`;

    const OLDpattern = /^\d{2}-[A-Z]+-[A-Z0-9]+-[A-Z]{3}-\d{4}$/;
    const pattern = /^\d{2}-[A-Z]+[a-z]?-[A-Z]+\d{4}-[A-Z]{3}-\d{4}$/

    // validation regex!!!!
    if (!pattern.test(CLASSID)) {
        console.log(CLASSID)
        return res.status(400).json({ message: 'Invalid class_id format. Follow: 12-MAWD-APPLIED1006-MON-0900' });
    }

    try {
        const [result] = await pool.execute(
            `INSERT INTO classes (class_id, course_code, grade_section, teacher_username, day, start_time, end_time) VALUES (?, ?, ?, ?, ?, ?, ?)`,
            [CLASSID, coursecode, gradesection, username, day, starttime, endtime]
        );

        res.json({ message: 'Class Created', class_id: CLASSID });
        console.log(`[Attendify] Admin created class ${CLASSID}`);
        console.log(`[Attendify] ${username} is now incharge of course ${coursecode}`)
    } catch (error) {
        console.error(error);
        res.json({ message: 'Either duplicate entry, or something is wrong' });
    }
});

app.post('/admins/createStudent', requireRole(['admin']), async (req, res) => {
    const { student_id, full_name, rfid, is_regular, grade_section, guardian_contact, class_ids } = req.body;
    const profile_image = req.file ? req.file.filename : null; // Handle file upload if applicable

    try {
        console.log(`[Attendify] Attempting to create student: ${full_name} (${student_id})`);

        // Check if RFID already exists
        const [existingStudent] = await pool.execute(`SELECT * FROM students WHERE rfid = ?`, [rfid]);
        if (existingStudent.length > 0) {
            console.log(`[Attendify] RFID conflict: ${rfid} already exists.`);
            return res.status(400).json({ message: 'RFID already exists' });
        }

        // Insert student into database
        await pool.execute(
            `INSERT INTO students (student_id, full_name, rfid, is_regular, grade_section, profile_image, guardian_contact) 
             VALUES (?, ?, ?, ?, ?, ?, ?)`,
            [student_id, full_name, rfid, is_regular, is_regular == 1 ? grade_section : null, profile_image, guardian_contact]
        );

        console.log(`[Attendify] Student created: ${full_name} (${student_id})`);

        if (is_regular == 1) {
            // Auto-enroll regular students in their grade section courses
            const [classes] = await pool.execute(`SELECT class_id FROM classes WHERE grade_section = ?`, [grade_section]);
            for (const cls of classes) {
                await pool.execute(
                    `INSERT INTO student_classes (student_id, class_id, enrollment_type, enrollment_date) VALUES (?, ?, 'preset', CURDATE())`,
                    [student_id, cls.class_id]
                );
                console.log(`[Attendify] Auto-enrolled ${full_name} in class ${cls.class_id}`);
            }
        } else {
            // Manually enroll irregular students in selected classes
            if (class_ids && class_ids.length > 0) {
                const values = class_ids.map(class_id => [student_id, class_id, 'manual', new Date()]);
                await pool.query(`INSERT INTO student_classes (student_id, class_id, enrollment_type, enrollment_date) VALUES ?`, [values]);
                console.log(`[Attendify] Manually enrolled ${full_name} in ${class_ids.length} classes`);
            }

            console.log(`[Attendify] Irregular student enrollment completed. Available classes can be fetched from '/admins/api'`);
        }

        res.json({ message: 'Student Enrolled Successfully' });
        console.log(`[Attendify] Enrollment completed: ${full_name} (${student_id})`);

    } catch (error) {
        console.error(`[Attendify] Error enrolling student:`, error);
        res.status(500).json({ message: 'Error enrolling student' });
    }
});

app.post('/admins/resetDatabase', requireRole(['admin']), async (req, res) => {
    const { password } = req.body;

    try {
        console.log(`[Attendify] Reset database request received`);


        if (password !== process.env.ADMIN_RESET_PASSWORD) {
            console.log(`[Attendify] Reset database failed: Incorrect password`);
            return res.status(403).json({ message: 'Incorrect password' });
        }


        await pool.execute('SET FOREIGN_KEY_CHECKS = 0');


        const tables = ['student_classes', 'students', 'classes', 'users', 'courses', 'attendance_history', 'attendance']; 
        for (const table of tables) {
            await pool.execute(`TRUNCATE TABLE ${table}`);
            console.log(`[Attendify] Cleared table: ${table}`);
        }

        // Re-enable foreign key checks
        await pool.execute('SET FOREIGN_KEY_CHECKS = 1');

        console.log(`[Attendify] Database reset successfully`);
        res.json({ message: 'Database reset successfully' });

    } catch (error) {
        console.error(`[Attendify] Error resetting database:`, error);
        res.status(500).json({ message: 'Error resetting database' });
    }
});

async function prefillAttendance() {
    try {
        console.log(`[Attendify] Starting attendance prefill process at ${new Date().toISOString()}`);
        console.log(`[Attendify] Turning off foreign key checks`);
        await pool.execute(`SET FOREIGN_KEY_CHECKS = 0`);

        // 1. Archive current attendance records into attendance_history
        const archiveQuery = `
            INSERT INTO attendance_history (attendance_id, student_id, class_id, attendance_date, status, time_in, time_out, recorded_by, remark)
            SELECT attendance_id, student_id, class_id, attendance_date, status, time_in, time_out, recorded_by, remark
            FROM attendance
        `;
        await pool.execute(archiveQuery);
        console.log(`[Attendify] Archived attendance records to history.`);

        // 2. Truncate the attendance table
        await pool.execute(`TRUNCATE TABLE attendance`);
        console.log(`[Attendify] Attendance table truncated.`);

        // 3. Prefill attendance for today's classes
        //    Note: The classes table has a 'day' column (enum: 'Mon','Tue','Wed','Thu','Fri').
        //          DATE_FORMAT(CURDATE(), '%a') returns a three-letter abbreviation (e.g., 'Mon') that matches.
        const prefillQuery = `
            INSERT INTO attendance (student_id, class_id, attendance_date, status, recorded_by)
            SELECT sc.student_id, cm.class_id, CURDATE(), 'absent', 'system'
            FROM student_classes sc
            JOIN classes cm ON sc.class_id = cm.class_id
            WHERE cm.day = DATE_FORMAT(CURDATE(), '%a')
              AND sc.enrollment_type IN ('preset', 'manual')
              AND NOT EXISTS (
                  SELECT 1 FROM attendance a
                  WHERE a.student_id = sc.student_id 
                    AND a.class_id = cm.class_id 
                    AND a.attendance_date = CURDATE()
              )
        `;
        await pool.execute(prefillQuery);
        console.log(`[Attendify] Attendance prefilled for ${new Date().toISOString()}.`);
        console.log(`[Attendify] Turning on foreign key checks`);
        await pool.execute(`SET FOREIGN_KEY_CHECKS = 1`);

    } catch (error) {
        console.error(`[Attendify] Error during attendance prefill process:`, error);
    }
}

cron.schedule('0 0 * * *', () => {
    console.log(`[Attendify] Cron job triggered at ${new Date().toISOString()}.`);
    prefillAttendance();
});
const cronTasks = cron.getTasks();

console.log(`[Attendify] Is cron running and listening?`, cronTasks.size > 0 ? 'Yes' : 'No');